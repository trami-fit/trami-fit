import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:math';
import 'package:table_calendar/table_calendar.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

void main() {
  runApp(const TramiApp());
}

class TramiApp extends StatelessWidget {
  const TramiApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Trami',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFF87CEEB)),
        useMaterial3: true,
        fontFamily: 'NotoSans',
      ),
      home: const MainScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _currentIndex = 0;

  final List<Widget> _screens = [
    const HomeScreen(),
    const RoutineScreen(),
    const LogScreen(),
    const SettingScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _screens[_currentIndex],
      bottomNavigationBar: Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.black12,
              blurRadius: 8,
              offset: Offset(0, -2),
            ),
          ],
        ),
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          onTap: (index) => setState(() => _currentIndex = index),
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.transparent,
          elevation: 0,
          selectedItemColor: const Color(0xFF87CEEB),
          unselectedItemColor: Colors.grey,
          selectedLabelStyle: const TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w600,
          ),
          unselectedLabelStyle: const TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w400,
          ),
          items: const [
            BottomNavigationBarItem(
              icon: Icon(Icons.home_outlined),
              activeIcon: Icon(Icons.home),
              label: 'HOME',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.fitness_center_outlined),
              activeIcon: Icon(Icons.fitness_center),
              label: 'Routine',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.analytics_outlined),
              activeIcon: Icon(Icons.analytics),
              label: 'Log',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.settings_outlined),
              activeIcon: Icon(Icons.settings),
              label: 'Setting',
            ),
          ],
        ),
      ),
    );
  }
}

// 운동 기록 데이터 모델
class WorkoutRecord {
  final DateTime date;
  final int duration; // seconds
  final String type;

  WorkoutRecord({
    required this.date,
    required this.duration,
    required this.type,
  });

  Map<String, dynamic> toJson() => {
    'date': date.toIso8601String(),
    'duration': duration,
    'type': type,
  };

  factory WorkoutRecord.fromJson(Map<String, dynamic> json) => WorkoutRecord(
    date: DateTime.parse(json['date']),
    duration: json['duration'],
    type: json['type'],
  );
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  Timer? _timer;
  bool _isWorkoutMode = false;
  bool _isPaused = false;

  // D-Day 카운트다운용
  int _days = 3;
  int _hours = 12;
  int _minutes = 24;
  int _seconds = 42;

  // 스탑워치용
  int _workoutHours = 0;
  int _workoutMinutes = 0;
  int _workoutSeconds = 0;

  // 애니메이션 컨트롤러
  late AnimationController _animationController;
  late AnimationController _progressController;

  // 달력 및 운동 기록
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  List<DateTime> _workoutDays = [];
  List<int> _fixedWorkoutDays = []; // 0=Sunday, 1=Monday, etc.
  List<WorkoutRecord> _workoutRecords = [];
  DateTime? _nextWorkoutDate;
  List<DateTime> _scheduledDays = [];

  @override
  void initState() {
    super.initState();
    _loadData();
    _startCountdownTimer();
    _animationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    _progressController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _timer?.cancel();
    _animationController.dispose();
    _progressController.dispose();
    super.dispose();
  }

  Future<void> _loadData() async {
    final prefs = await SharedPreferences.getInstance();

    // 운동한 날짜들 로드
    final workoutDaysJson = prefs.getStringList('workout_days') ?? [];
    _workoutDays = workoutDaysJson.map((e) => DateTime.parse(e)).toList();

    // 고정 운동일 로드
    _fixedWorkoutDays =
        prefs
            .getStringList('fixed_workout_days')
            ?.map((e) => int.parse(e))
            .toList() ??
        [];

    // 운동 기록 로드
    final recordsJson = prefs.getStringList('workout_records') ?? [];
    _workoutRecords = recordsJson
        .map((e) => WorkoutRecord.fromJson(jsonDecode(e)))
        .toList();

    // 예정된 운동일 로드
    final scheduledJson = prefs.getStringList('scheduled_workout_days') ?? [];
    _scheduledDays = scheduledJson.map((e) => DateTime.parse(e)).toList();

    _calculateNextWorkoutDate();
    setState(() {});
  }

  Future<void> _saveData() async {
    final prefs = await SharedPreferences.getInstance();

    // 운동한 날짜들 저장
    await prefs.setStringList(
      'workout_days',
      _workoutDays.map((e) => e.toIso8601String()).toList(),
    );

    // 고정 운동일 저장
    await prefs.setStringList(
      'fixed_workout_days',
      _fixedWorkoutDays.map((e) => e.toString()).toList(),
    );

    // 운동 기록 저장
    await prefs.setStringList(
      'workout_records',
      _workoutRecords.map((e) => jsonEncode(e.toJson())).toList(),
    );

    // 예정된 운동일 저장
    await prefs.setStringList(
      'scheduled_workout_days',
      _scheduledDays
          .map((e) => DateTime(e.year, e.month, e.day).toIso8601String())
          .toList(),
    );
  }

  void _calculateNextWorkoutDate() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    // 후보 1: 사용자가 직접 지정한 예정일 중 오늘 이후(오늘 포함)
    final scheduledCandidates = _scheduledDays
        .map((d) => DateTime(d.year, d.month, d.day))
        .where((d) => !d.isBefore(today))
        .toList();

    // 후보 2: 고정 운동일의 다음 14일 내 발생일들
    final List<DateTime> fixedCandidates = [];
    for (int i = 0; i < 14; i++) {
      final checkDate = today.add(Duration(days: i));
      if (_fixedWorkoutDays.contains(checkDate.weekday % 7)) {
        fixedCandidates.add(checkDate);
      }
    }

    final allCandidates = <DateTime>[
      ...scheduledCandidates,
      ...fixedCandidates,
    ];
    allCandidates.sort();
    _nextWorkoutDate = allCandidates.isNotEmpty ? allCandidates.first : null;
    _calculateCountdown();
  }

  void _calculateCountdown() {
    if (_nextWorkoutDate == null) return;

    final now = DateTime.now();
    // 목표는 해당 날짜의 00:00:00
    final target = DateTime(
      _nextWorkoutDate!.year,
      _nextWorkoutDate!.month,
      _nextWorkoutDate!.day,
    );
    final difference = target.difference(now);

    setState(() {
      _days = difference.inDays;
      _hours = difference.inHours % 24;
      _minutes = difference.inMinutes % 60;
      _seconds = difference.inSeconds % 60;
    });
  }

  void _startCountdownTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      // 매 틱마다 남은 시간 재계산하여 정확도 유지
      _calculateCountdown();
    });
  }

  void _startWorkoutTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!_isPaused) {
        setState(() {
          _workoutSeconds++;
          if (_workoutSeconds >= 60) {
            _workoutSeconds = 0;
            _workoutMinutes++;
            if (_workoutMinutes >= 60) {
              _workoutMinutes = 0;
              _workoutHours++;
            }
          }
        });
      }
    });
  }

  void _startWorkoutMode() {
    setState(() {
      _isWorkoutMode = true;
      _isPaused = false;
      _timer?.cancel();

      // 운동 모드 시작
      _workoutHours = 0;
      _workoutMinutes = 0;
      _workoutSeconds = 0;
      _startWorkoutTimer();
      _animationController.repeat();
      _progressController.forward();
    });
  }

  void _pauseWorkout() {
    setState(() {
      _isPaused = !_isPaused;
    });
  }

  void _finishWorkout() {
    _showFinishDialog();
  }

  void _endWorkout() {
    setState(() {
      _isWorkoutMode = false;
      _isPaused = false;
      _timer?.cancel();

      // 운동 기록 저장
      final totalSeconds =
          _workoutHours * 3600 + _workoutMinutes * 60 + _workoutSeconds;
      if (totalSeconds > 0) {
        final record = WorkoutRecord(
          date: DateTime.now(),
          duration: totalSeconds,
          type: '근력운동',
        );
        _workoutRecords.add(record);

        // 오늘을 운동한 날로 추가
        final today = DateTime(
          DateTime.now().year,
          DateTime.now().month,
          DateTime.now().day,
        );
        if (!_workoutDays.any((d) => isSameDay(d, today))) {
          _workoutDays.add(today);
        }

        _saveData();
      }

      // 대기 모드로 돌아가기
      _calculateNextWorkoutDate();
      _startCountdownTimer();
      _animationController.stop();
      _animationController.reset();
      _progressController.reset();
    });
  }

  String _getTimerText() {
    if (_isWorkoutMode) {
      // 스탑워치 모드: 00:00:00 형식
      return '${_workoutHours.toString().padLeft(2, '0')}:${_workoutMinutes.toString().padLeft(2, '0')}:${_workoutSeconds.toString().padLeft(2, '0')}';
    } else {
      // D-Day 모드
      if (_days > 0) {
        // 1일 이상 남은 경우: 3일 12:24:42
        return '$_days일 ${_hours.toString().padLeft(2, '0')}:${_minutes.toString().padLeft(2, '0')}:${_seconds.toString().padLeft(2, '0')}';
      } else {
        // 1일 미만 남은 경우: 12:24:42
        return '${_hours.toString().padLeft(2, '0')}:${_minutes.toString().padLeft(2, '0')}:${_seconds.toString().padLeft(2, '0')}';
      }
    }
  }

  void _showCalendarDialog() {
    // 항상 오늘 기준으로 달력을 열도록 초기화
    setState(() {
      _focusedDay = DateTime.now();
      _selectedDay = DateTime.now();
    });

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            padding: const EdgeInsets.all(20),
            // 화면의 80% 높이로 크게
            height: MediaQuery.of(context).size.height * 0.8,
            width: MediaQuery.of(context).size.width * 0.9,
            child: Column(
              children: [
                // 상단 제목: "8月のスケジュール" 형식
                Text(
                  '${_focusedDay.month}月のスケジュール',
                  style: const TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 12),
                Expanded(
                  child: TableCalendar<String>(
                    firstDay: DateTime.utc(2020, 1, 1),
                    lastDay: DateTime.utc(2030, 12, 31),
                    focusedDay: _focusedDay,
                    calendarFormat: CalendarFormat.month,
                    eventLoader: (day) {
                      final isDone = _workoutDays.any((d) => isSameDay(d, day));
                      final isScheduled = _scheduledDays.any(
                        (d) => isSameDay(d, day),
                      );
                      final List<String> events = [];
                      if (isDone) events.add('done');
                      if (isScheduled) events.add('scheduled');
                      return events;
                    },
                    startingDayOfWeek: StartingDayOfWeek.sunday,
                    calendarStyle: const CalendarStyle(
                      outsideDaysVisible: false,
                      weekendTextStyle: TextStyle(color: Colors.red),
                      holidayTextStyle: TextStyle(color: Colors.red),
                    ),
                    headerStyle: const HeaderStyle(
                      formatButtonVisible: false,
                      titleCentered: true,
                    ),
                    calendarBuilders: CalendarBuilders(
                      markerBuilder: (context, day, events) {
                        if (events.isEmpty) return null;
                        // 여러 이벤트를 작은 점 두 개로 표현
                        return Positioned(
                          right: 4,
                          bottom: 4,
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              if (events.contains('scheduled'))
                                Container(
                                  width: 6,
                                  height: 6,
                                  margin: const EdgeInsets.only(right: 2),
                                  decoration: const BoxDecoration(
                                    color: Color(0xFF2196F3), // 파란색: 예정
                                    shape: BoxShape.circle,
                                  ),
                                ),
                              if (events.contains('done'))
                                Container(
                                  width: 6,
                                  height: 6,
                                  decoration: const BoxDecoration(
                                    color: Color(0xFF4CAF50), // 초록색: 완료
                                    shape: BoxShape.circle,
                                  ),
                                ),
                            ],
                          ),
                        );
                      },
                      defaultBuilder: (context, day, focusedDay) {
                        // 고정 운동일 표시
                        if (_fixedWorkoutDays.contains(day.weekday % 7)) {
                          return Container(
                            margin: const EdgeInsets.all(4),
                            decoration: BoxDecoration(
                              color: const Color(0xFF87CEEB).withOpacity(0.3),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Center(
                              child: Text(
                                '${day.day}',
                                style: const TextStyle(
                                  color: Colors.black87,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          );
                        }
                        return null;
                      },
                    ),
                    onDaySelected: (selectedDay, focusedDay) {
                      setState(() {
                        _selectedDay = selectedDay;
                        _focusedDay = focusedDay;
                      });
                    },
                    selectedDayPredicate: (day) {
                      return isSameDay(_selectedDay, day);
                    },
                  ),
                ),
                const SizedBox(height: 10),
                // 선택 날짜를 운동 예정으로 등록/해제
                if (_selectedDay != null)
                  Padding(
                    padding: const EdgeInsets.only(bottom: 12.0),
                    child: ElevatedButton(
                      onPressed: () {
                        final sel = DateTime(
                          _selectedDay!.year,
                          _selectedDay!.month,
                          _selectedDay!.day,
                        );
                        setState(() {
                          final exists = _scheduledDays.any(
                            (d) => isSameDay(d, sel),
                          );
                          if (exists) {
                            _scheduledDays.removeWhere(
                              (d) => isSameDay(d, sel),
                            );
                          } else {
                            _scheduledDays.add(sel);
                          }
                          _saveData();
                          _calculateNextWorkoutDate();
                        });
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF2196F3),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                      child: Text(
                        _scheduledDays.any(
                              (d) =>
                                  _selectedDay != null &&
                                  isSameDay(d, _selectedDay!),
                            )
                            ? '予定解除'
                            : '運動予定にする',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                        ),
                      ),
                    ),
                  ),
                // 고정 운동일 인라인 설정
                const SizedBox(height: 4),
                const Text(
                  '固定運動日',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: List.generate(7, (index) {
                    final dayNames = ['日', '月', '火', '水', '木', '金', '土'];
                    final selected = _fixedWorkoutDays.contains(index);
                    return ChoiceChip(
                      label: Text(dayNames[index]),
                      selected: selected,
                      selectedColor: const Color(0xFF87CEEB).withOpacity(0.8),
                      onSelected: (bool value) {
                        setState(() {
                          if (value) {
                            if (!_fixedWorkoutDays.contains(index)) {
                              _fixedWorkoutDays.add(index);
                            }
                          } else {
                            _fixedWorkoutDays.remove(index);
                          }
                          _fixedWorkoutDays.sort();
                          _saveData();
                          _calculateNextWorkoutDate();
                        });
                      },
                    );
                  }),
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () => Navigator.of(context).pop(),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                        child: const Text(
                          '閉じる',
                          style: TextStyle(color: Colors.white, fontSize: 12),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _showFixedWorkoutDaysDialog() {
    List<int> tempFixedDays = List.from(_fixedWorkoutDays);
    final dayNames = ['日', '月', '火', '水', '木', '金', '土'];

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return AlertDialog(
              title: const Text('固定運動日設定'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: List.generate(7, (index) {
                  return CheckboxListTile(
                    title: Text('${dayNames[index]}曜日'),
                    value: tempFixedDays.contains(index),
                    onChanged: (bool? value) {
                      setDialogState(() {
                        if (value == true) {
                          tempFixedDays.add(index);
                        } else {
                          tempFixedDays.remove(index);
                        }
                      });
                    },
                  );
                }),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('キャンセル'),
                ),
                TextButton(
                  onPressed: () {
                    setState(() {
                      _fixedWorkoutDays = tempFixedDays;
                      _calculateNextWorkoutDate();
                    });
                    _saveData();
                    Navigator.of(context).pop();
                  },
                  child: const Text('保存'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _showFinishDialog() {
    final totalSeconds =
        _workoutHours * 3600 + _workoutMinutes * 60 + _workoutSeconds;
    final minutes = totalSeconds ~/ 60;
    final seconds = totalSeconds % 60;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            padding: const EdgeInsets.all(30),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Text(
                  'お疲れ様でした🎉',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 20),
                const Text(
                  '今日の運動時間',
                  style: TextStyle(fontSize: 16, color: Colors.black54),
                ),
                const SizedBox(height: 10),
                Text(
                  '$minutes分$seconds秒',
                  style: const TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                const SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Container(
                      width: 120,
                      height: 45,
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFF87CEEB), Color(0xFF4FC3F7)],
                        ),
                        borderRadius: BorderRadius.circular(22),
                      ),
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                          // TODO: 다음 운동일 설정 화면으로 이동
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          shadowColor: Colors.transparent,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(22),
                          ),
                        ),
                        child: const Text(
                          '次の運動日設定',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                    Container(
                      width: 120,
                      height: 45,
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFF4CAF50), Color(0xFF66BB6A)],
                        ),
                        borderRadius: BorderRadius.circular(22),
                      ),
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                          // TODO: 체중 입력 화면으로 이동
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          shadowColor: Colors.transparent,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(22),
                          ),
                        ),
                        child: const Text(
                          '体重の入力に',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 15),
                Container(
                  width: double.infinity,
                  height: 45,
                  decoration: BoxDecoration(
                    color: Colors.grey[600],
                    borderRadius: BorderRadius.circular(22),
                  ),
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                      _endWorkout();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.transparent,
                      shadowColor: Colors.transparent,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(22),
                      ),
                    ),
                    child: const Text(
                      '終了',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            children: [
              // Header with icons
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFF87CEEB).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: GestureDetector(
                      onTap: _showCalendarDialog,
                      child: const Icon(
                        Icons.calendar_today_outlined,
                        color: Color(0xFF87CEEB),
                        size: 24,
                      ),
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: const Color(0xFF87CEEB).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Icon(
                      Icons.speed_outlined,
                      color: Color(0xFF87CEEB),
                      size: 24,
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 40),

              // Goal and activity stats
              Column(
                children: [
                  RichText(
                    text: const TextSpan(
                      style: TextStyle(
                        fontSize: 18,
                        color: Colors.black87,
                        fontWeight: FontWeight.w400,
                      ),
                      children: [
                        TextSpan(text: 'ゴールまであと '),
                        TextSpan(
                          text: '6kg',
                          style: TextStyle(
                            color: Color(0xFFFF6B9D),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  RichText(
                    text: TextSpan(
                      style: const TextStyle(
                        fontSize: 18,
                        color: Colors.black87,
                        fontWeight: FontWeight.w400,
                      ),
                      children: [
                        const TextSpan(text: '今月活動日数 '),
                        TextSpan(
                          text:
                              '${_workoutDays.where((d) => d.month == DateTime.now().month).length}日',
                          style: const TextStyle(
                            color: Color(0xFFFF6B9D),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 60),

              // Circular timer
              Stack(
                alignment: Alignment.center,
                children: [
                  SizedBox(
                    width: 280,
                    height: 280,
                    child: AnimatedBuilder(
                      animation: _isWorkoutMode
                          ? _progressController
                          : _animationController,
                      builder: (context, child) {
                        return CircularProgressIndicator(
                          value: _isWorkoutMode
                              ? _progressController.value
                              : 0.3,
                          strokeWidth: 12,
                          backgroundColor: Colors.grey.withOpacity(0.2),
                          valueColor: _isWorkoutMode
                              ? AlwaysStoppedAnimation<Color>(
                                  Color.lerp(
                                    const Color(0xFF4CAF50), // 초록색
                                    const Color(0xFF2196F3), // 파란색
                                    (sin(_animationController.value * 2 * pi) +
                                            1) /
                                        2,
                                  )!,
                                )
                              : const AlwaysStoppedAnimation<Color>(
                                  Color(0xFF87CEEB),
                                ),
                        );
                      },
                    ),
                  ),
                  Column(
                    children: [
                      Text(
                        _isWorkoutMode ? '運動時間' : '次に運動日まで',
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black54,
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        _getTimerText(),
                        style: const TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.w600,
                          color: Colors.black87,
                          letterSpacing: 1.2,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          color:
                              (_isWorkoutMode
                                      ? const Color(0xFF4CAF50)
                                      : const Color(0xFF87CEEB))
                                  .withOpacity(0.1),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          _isWorkoutMode
                              ? (_isPaused ? '一時停止中...' : '運動中...')
                              : '8月22日 火曜日',
                          style: TextStyle(
                            fontSize: 14,
                            color: _isWorkoutMode
                                ? const Color(0xFF4CAF50)
                                : const Color(0xFF87CEEB),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),

              const Spacer(),

              // Workout buttons
              if (!_isWorkoutMode)
                Container(
                  width: MediaQuery.of(context).size.width * 0.7,
                  height: 50,
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [Color(0xFF87CEEB), Color(0xFF4FC3F7)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(25),
                    boxShadow: [
                      BoxShadow(
                        color: const Color(0xFF87CEEB).withOpacity(0.3),
                        blurRadius: 12,
                        offset: const Offset(0, 6),
                      ),
                    ],
                  ),
                  child: ElevatedButton(
                    onPressed: _startWorkoutMode,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.transparent,
                      shadowColor: Colors.transparent,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                    child: const Text(
                      '運動を開始する',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              if (_isWorkoutMode)
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    // 一時停止 버튼
                    Container(
                      width: MediaQuery.of(context).size.width * 0.35,
                      height: 50,
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: _isPaused
                              ? [
                                  const Color(0xFF4CAF50),
                                  const Color(0xFF66BB6A),
                                ]
                              : [
                                  const Color(0xFFFFA726),
                                  const Color(0xFFFFB74D),
                                ],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        borderRadius: BorderRadius.circular(25),
                        boxShadow: [
                          BoxShadow(
                            color:
                                (_isPaused
                                        ? const Color(0xFF4CAF50)
                                        : const Color(0xFFFFA726))
                                    .withOpacity(0.3),
                            blurRadius: 12,
                            offset: const Offset(0, 6),
                          ),
                        ],
                      ),
                      child: ElevatedButton(
                        onPressed: _pauseWorkout,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          shadowColor: Colors.transparent,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(25),
                          ),
                        ),
                        child: Text(
                          _isPaused ? '再開' : '一時停止',
                          style: const TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                    // 終了 버튼
                    Container(
                      width: MediaQuery.of(context).size.width * 0.35,
                      height: 50,
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFFE57373), Color(0xFFEF5350)],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        borderRadius: BorderRadius.circular(25),
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFFE57373).withOpacity(0.3),
                            blurRadius: 12,
                            offset: const Offset(0, 6),
                          ),
                        ],
                      ),
                      child: ElevatedButton(
                        onPressed: _finishWorkout,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          shadowColor: Colors.transparent,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(25),
                          ),
                        ),
                        child: const Text(
                          '終了',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),

              const SizedBox(height: 16),

              // Skip button (운동 모드가 아닐 때만 표시)
              if (!_isWorkoutMode)
                TextButton(
                  onPressed: () {
                    // TODO: 스킵 기능 구현
                  },
                  child: const Text(
                    'Skip',
                    style: TextStyle(
                      fontSize: 16,
                      color: Color(0xFF87CEEB),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),

              const SizedBox(height: 20),

              // Bottom instruction (운동 모드가 아닐 때만 표시)
              if (!_isWorkoutMode)
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.keyboard_arrow_up,
                      color: Colors.grey.withOpacity(0.6),
                      size: 20,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      '下にスライドして今日の運動プランを立てる',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey.withOpacity(0.8),
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ],
                ),
            ],
          ),
        ),
      ),
    );
  }
}

// Placeholder screens for other tabs
class RoutineScreen extends StatelessWidget {
  const RoutineScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Text('Routine Screen', style: TextStyle(fontSize: 24)),
      ),
    );
  }
}

class LogScreen extends StatefulWidget {
  const LogScreen({super.key});

  @override
  State<LogScreen> createState() => _LogScreenState();
}

class _LogScreenState extends State<LogScreen> {
  List<WorkoutRecord> _workoutRecords = [];

  @override
  void initState() {
    super.initState();
    _loadWorkoutRecords();
  }

  Future<void> _loadWorkoutRecords() async {
    final prefs = await SharedPreferences.getInstance();
    final recordsJson = prefs.getStringList('workout_records') ?? [];
    setState(() {
      _workoutRecords =
          recordsJson.map((e) => WorkoutRecord.fromJson(jsonDecode(e))).toList()
            ..sort((a, b) => b.date.compareTo(a.date));
    });
  }

  String _formatDuration(int totalSeconds) {
    final hours = totalSeconds ~/ 3600;
    final minutes = (totalSeconds % 3600) ~/ 60;
    final seconds = totalSeconds % 60;

    if (hours > 0) {
      return '$hours時間$minutes分$seconds秒';
    } else {
      return '$minutes分$seconds秒';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: AppBar(
        title: const Text(
          '運動記録',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black87),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: _workoutRecords.isEmpty
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.fitness_center_outlined,
                    size: 64,
                    color: Colors.grey,
                  ),
                  SizedBox(height: 16),
                  Text(
                    '運動記録がありません',
                    style: TextStyle(
                      fontSize: 18,
                      color: Colors.grey,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            )
          : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _workoutRecords.length,
              itemBuilder: (context, index) {
                final record = _workoutRecords[index];
                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Row(
                    children: [
                      Container(
                        width: 50,
                        height: 50,
                        decoration: BoxDecoration(
                          color: const Color(0xFF87CEEB).withOpacity(0.1),
                          borderRadius: BorderRadius.circular(25),
                        ),
                        child: const Icon(
                          Icons.fitness_center,
                          color: Color(0xFF87CEEB),
                          size: 24,
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              record.type,
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                color: Colors.black87,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              '${record.date.year}年${record.date.month}月${record.date.day}日',
                              style: const TextStyle(
                                fontSize: 14,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Text(
                        _formatDuration(record.duration),
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF4CAF50),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
    );
  }
}

class SettingScreen extends StatelessWidget {
  const SettingScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Text('Setting Screen', style: TextStyle(fontSize: 24)),
      ),
    );
  }
}
